<?php
/**
 * Mainframe - Utilities
 *
 * A set of functions and classes used by all of the various Mainframe components and repositories.
 *
 * @author Luke Visinoni <luke.visinoni@gmail.com>
 * @copyright (c) 2020 Luke Visinoni <luke.visinoni@gmail.com>
 */

namespace Mainframe\Utils\Data\Normalize\Filter;

use Mainframe\Utils\Exception\InvalidArgumentException;
use SplPriorityQueue;

/**
 * @todo It probably makes more sense for me to rewrite this and, rather than using SplPriorityQueue,
 *       which is probably overkill, instead just create an array in the form of: arr[priority][i] where
 *       priority is, obviously, the priority int and then i is the index, which allows us to pop off
 *       items in the order they came in. Other options would be to use an array of SplQueue objects or,
 *       I believe to be as true to the actual SplPriorityQueue as possible, it would make the most sense
 *       to use an SplMaxHeap object where each node is either an array or an SplQueue. That is probably
 *       the best way to go, honestly. Priority will be the figure that is "maxed".
 */
class Queue extends SplPriorityQueue
{
    const PRIORITY_LOWEST = -100;
    const PRIORITY_LOW = -10;
    const PRIORITY_NORMAL = 0;
    const PRIORITY_HIGH = 10;
    const PRIORITY_HIGHEST = 100;

    /** @var int Used to ensure predictable queue order for same priority */
    protected $queueOrder = PHP_INT_MAX;

    /**
     * @inheritDoc
     */
//    public function compare($priority1, $priority2)
//    {
//        parent::compare($priority1, $priority2); // TODO: Change the autogenerated stub
//    }

    /**
     * @inheritDoc
     */
    public function insert($value, $priority)
    {
        if (is_int($priority)) {
            $priority = [$priority, $this->queueOrder--];
        }
        InvalidArgumentException::raiseUnless(
            $value instanceof FilterInterface,
            "Cannot insert items of type \"%s\" into %s. Must be of type \"%s\"",
            [typeof($value), static::class, FilterInterface::class]
        );
        parent::insert($value, $priority);
    }

    /**
     * @inheritDoc
     */
//    public function __call($name, $arguments)
//    {
//        // TODO: Implement __call() method.
//    }

    /**
     * @inheritDoc
     */
    public function __invoke(...$args)
    {
        /** @var FilterInterface $f */
        $f = $this->current();
        return $f->apply(...$args);
    }

}